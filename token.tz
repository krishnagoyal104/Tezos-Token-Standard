parameter bytes ; storage (pair :storage (map %balances address nat) (pair (nat %version) (pair (nat %totalSupply) (pair (nat %decimals) (pair (string %name) (pair (string %symbol) (address %owner))))))) ; code { DUP ; DIP { CDR @storage_slash_1 ; } ; CAR @parameter_slash_2 ; DUP @parameter ; UNPACK (pair address (pair nat (pair bool (option bytes)))) ; IF_NONE { PUSH string "Incorrect data format" ; FAILWITH ; } { DUP @data ; DUP ; CAR @receiver ; DUUP ; CDAR @amount ; SENDER @sender ; DUUUP @receiver ; DUUP @sender ; COMPARE ; EQ ; IF { PUSH string "Sender cannot be Receiver" ; FAILWITH ; } { UNIT ; } ; DROP ; DUUUUUUUP @storage ; CAR %balances ; DUUP @sender ; GET ; IF_NONE { PUSH string "No balance found" ; FAILWITH ; } { DUUUP @amount ; DUUP @sender_balance ; SUB ; ISNAT ; IF_NONE { PUSH string "Not enough balance" ; FAILWITH ; } { DUUUUUUUUUP @storage ; CDR ; DUUUUUUUUUUP @storage ; CAR %balances ; DUUUP @new_balance ; DUUUUUUP @sender ; DIP { SOME ; } ; DIIIIP { DROP ; } ; UPDATE ; PAIR %balances ; } ; DIP { DROP ; } ; } ; RENAME @storage ; DUP @storage ; CAR %balances ; DUUUUUP @receiver ; GET ; IF_NONE { DUP @storage ; CDR ; DUUP @storage ; CAR %balances ; DUUUUUP @amount ; DUUUUUUUP @receiver ; DIP { SOME ; } ; UPDATE ; PAIR %balances ; } { DUUP @storage ; CDR ; DUUUP @storage ; CAR %balances ; DUUUUUUP @amount ; DUUUUP @receiver_balance ; ADD ; DUUUUUUUUP @receiver ; DIP { SOME ; } ; DIIIIP { DROP ; } ; UPDATE ; PAIR %balances ; } ; RENAME @storage ; PUSH bool True ; DUUUUUUUP ; CDDAR @isContract ; COMPARE ; EQ ; IF { DUUUUUUP ; CDDDR @contractData ; IF_NONE { PUSH string "You need to provide some data" ; FAILWITH ; } { DUUUUUUP @receiver ; CONTRACT bytes ; IF_NONE { PUSH string "Wrong Address or Contract Abi" ; FAILWITH ; } { PUSH mutez 0 ; DUUUP ; TRANSFER_TOKENS @op ; DUUUP ; NIL operation ; DUUUP ; DIIIP { DROP ; } ; CONS ; PAIR ; } ; DIP { DROP ; } ; } ; } { DUP @storage ; NIL operation ; PAIR ; } ; DIP { DROP ; DROP ; DROP ; DROP ; DROP ; DROP ; DROP ; } ; } ; DIP { DROP ; DROP ; } ; } ; 
